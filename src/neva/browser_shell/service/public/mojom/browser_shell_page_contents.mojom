// Copyright 2021 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

module browser_shell.mojom;

struct AuthChallenge {
  string url;
  string host;
  bool is_proxy;
  int32 port;
  string realm;
  string scheme;
};

struct PageContentsState {
  bool can_go_back;
  bool can_go_forward;
};

struct FaviconSize {
  uint32 width;
  uint32 height;
};

struct FaviconInfo {
  string url;
  string type;
  array<FaviconSize> sizes;
};

struct WindowInfo {
  string target_url;
  int32 initial_width;
  int32 initial_height;
  string name;
  string window_open_disposition;
  bool user_gesture;
};

struct OpenURLInfo {
  string target_url;
  string window_open_disposition;
  bool user_gesture;
};

struct PageContentsCreationInfo {
  bool active_state;
  bool error_page_hiding;
  string user_agent;
  double zoom_factor;
};

interface PageContentsClient {
  EnterHtmlFullscreen();
  DidFailLoad(string url, bool is_main_frame, string error, int32 error_code);
  DidFinishLoad(string url, bool is_main_frame);
  DidFinishNavigation(string url);
  DidPushHistoryNavigation(string url);
  DidStartLoading();
  DidStartNavigation(string url);
  DidStopLoading();
  DidUpdateFaviconUrl(array<FaviconInfo> favicons);
  DOMReady();
  LeaveHtmlFullscreen();
  LoadProgressChanged(uint32 progress);
  OnClose();
  OnAcceptedLanguagesChanged(string languages);
  OnAuthChallenge(AuthChallenge challenge);
  OnExit(string reason);
  OnFocusChanged(bool is_focused);
  OnKeyEvent(string key_name, int32 key_code);
  OnMouseClickEvent(int32 button);
  OnNavigationEntryCommitted(PageContentsState state);
  OnNewWindowOpen(uint64 id, WindowInfo window_info);
  OnOpenURLFromTab(OpenURLInfo open_url_info);
  OnRendererUnresponsive();
  OnRendererResponsive();
  OnPermissionRequest(string permission, uint64 id);
  OnZoomFactorChanged(double zoom_factor);
  RunJSDialog(string type, string message);
  TitleUpdated(string title);
};

interface PageContents {
  BindClient() => (pending_associated_receiver<PageContentsClient> client_receiver);

  [Sync] SyncId() => (uint64 id);
  [Sync] SyncActiveState() => (bool active_state);
  AckPermission(bool ack, uint64 id);
  AckAuthChallenge(string login, string passwd, string url);
  Activate();
  CaptureVisibleRegion(string format, int32 quality) => (string base64_data_url);
  BindNewPageContentsById(pending_receiver<PageContents> receiver, uint64 id)
      => (uint64 id, PageContentsCreationInfo info);
  ClearData(string clear_options, string clear_data_type_set);
  CloseJSDialog(bool ok, string response);
  Deactivate();
  ExecuteJavaScriptInAllFrames(string code);
  ExecuteJavaScriptInMainFrame(string code);
  ExitFullscreen();
  GoBack();
  GoForward();
  LoadURL(string url) => (string url);
  Reload();
  ResumeDOM();
  ResumeMedia();
  ScrollByY(int32 y_shift);
  SetAcceptedLanguages(string launguages);
  SetErrorPageHiding(bool enable);
  SetFocus();
  SetKeyCodesFilter(array<string> key_codes);
  SetPageBaseBackgroundColor(string color);
  SetSuppressSSLErrorPolicy(bool suppress_errors);
  SetZoomFactor(double factor);
  Stop();
  SuspendDOM();
  SuspendMedia();
};
