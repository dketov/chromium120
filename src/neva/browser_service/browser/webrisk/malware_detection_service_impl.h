// Copyright 2022 LG Electronics, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

#ifndef NEVA_BROWSER_SERVICE_BROWSER_WEBRISK_MALWARE_DETECTION_SERVICE_IMPL_H_
#define NEVA_BROWSER_SERVICE_BROWSER_WEBRISK_MALWARE_DETECTION_SERVICE_IMPL_H_

#include <unordered_map>

#include "base/files/file_path.h"
#include "base/functional/callback.h"
#include "base/memory/scoped_refptr.h"
#include "base/memory/weak_ptr.h"
#include "base/threading/thread.h"
#include "neva/browser_service/browser/malware_detection_service.h"
#include "neva/browser_service/browser/webrisk/core/webrisk_fetch_hashes.h"

namespace network {
class SharedURLLoaderFactory;
}

namespace webrisk {

class WebRiskDataStore;
class WebRiskSearchHashes;

using PrefixSize = size_t;
using HashPrefix = std::string;
using HashPrefixMap = std::unordered_map<PrefixSize, HashPrefix>;
using FullHash = HashPrefix;

class MalwareDetectionServiceImpl : public neva::MalwareDetectionService {
 public:
  MalwareDetectionServiceImpl();
  ~MalwareDetectionServiceImpl() override;

  // Implementation of MalwareDetectionService
  bool Initialize(content::BrowserContext* browser_context) override;
  void CheckURL(const GURL& url, CheckUrlCallback callback) override;

 private:
  enum State {
    kUninitialized,
    kInitFailed,
    kInvalidKey,
    kInProgress,
    kInitialized,
  };

  void InitializeTask(content::BrowserContext* browser_context);
  void CheckURLTask(const GURL& url);
  bool MigrateDataTask();
  void OnMigratedData(bool result);
  const std::string ReadDataFromFile(const char* file_name);
  const std::string GetGoogleServiceAuthKey();

  void FindHashPrefix(const std::vector<FullHash>& full_hashes);

  void OnSearchHashResponse(bool success);
  void RunPendingCallback(bool success);
  void OnFetchHashResponse(WebRiskFetchHashes::Status status);

  void UrlToFullHashes(const GURL& url, std::vector<FullHash>* full_hashes);
  bool FullHashToHashPrefix(const FullHash& full_hash,
                            PrefixSize prefix_size,
                            HashPrefix* hash_prefix);
  void CanonicalizeUrl(const GURL& url,
                       std::string* canonicalized_hostname,
                       std::string* canonicalized_path,
                       std::string* canonicalized_query);

  // A separated thread that will handle fetching data and check URL task.
  base::Thread malware_detection_thread_;

  CheckUrlCallback pending_callback_;

  std::string google_service_auth_key_;

  scoped_refptr<WebRiskDataStore> webrisk_data_store_;
  std::unique_ptr<WebRiskSearchHashes> search_hash_request_;
  std::unique_ptr<WebRiskFetchHashes> fetch_hashes_request_;

  scoped_refptr<base::SingleThreadTaskRunner> ui_task_runner;
  base::WeakPtrFactory<MalwareDetectionServiceImpl> weak_factory_{this};

  network::SharedURLLoaderFactory* url_loader_factory_ = nullptr;

  bool webrisk_enabled_ = true;

  std::atomic<State> initialize_state_{kUninitialized};
};

}  // namespace webrisk
#endif  // NEVA_BROWSER_SERVICE_BROWSER_WEBRISK_MALWARE_DETECTION_SERVICE_IMPL_H_
