# Copyright 2019 LG Electronics, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import("//build/config/locales.gni")
import("//build_overrides/build.gni")
import("//neva/app_runtime/app_runtime_locales.gni")
import("//neva/neva.gni")
import("//webos/install/paths.gni")
import("//webos/install/sysbus.gni")
import("headers.gni")

copy("weboswebruntime") {
  testonly = true
  sources = [
    "$root_out_dir/app_runtime_content.pak",
    "$root_out_dir/icudtl.dat",
    "$root_out_dir/snapshot_blob.bin",
    "$root_out_dir/webos_content.pak"
  ]

  outputs = [ "$image_path/$cbe_data_dir/{{source_file_part}}" ]

  deps = [
    "//neva/app_runtime:app_runtime_resources", # for app_runtime_content.pak
    "//third_party/icu:icudata",                # for icudtl.dat
    "//v8:v8",                                  # for snapshot_blob.bin
    "//webos:webos_resources",                  # for webos_content.pak
    ":locales",
    ":headers",
    ":pkgconfig",
    ":debugging_buildflags_header",
    ":logging_buildflags_header",
    ":partition_alloc_buildflags_header",
    ":target_buildflags_header",
    ":tracing_buildflags_header"
  ]
  if (use_cbe) {
    deps += [ ":cbe" ]                          # for libcbe.so
  }
  if (use_lttng) {
    deps += [ ":lttng_provider" ]               # for libchromium_lttng_provider.so
  }
  if (use_perfetto_client_library) {
    deps += [ ":test_trace_processor" ]
  }
}

if (use_lttng) {
  copy("lttng_provider") {
    testonly = true
    sources = [
      "$root_out_dir/liblttng_provider.so"
    ]
    outputs = [ "$image_path/$libdir/{{source_file_part}}" ]

    deps = [
      "//base/trace_event/neva/lttng:lttng_provider"
    ]
  }
}

if (use_cbe) {
  copy("cbe") {
    testonly = true
    sources = [
      "$root_out_dir/libcbe.so",
    ]
    outputs = [ "$image_path/$libdir/{{source_file_part}}" ]

    deps = [
      "//neva/cbe:chromium_cbe"
    ]
  }
}

if (use_perfetto_client_library) {
  copy("test_trace_processor") {
    testonly = true
    sources = [
      "$root_out_dir/libtest_trace_processor.so"
    ]
    outputs = [ "$image_path/$libdir/{{source_file_part}}" ]
    deps = [
      "//base/test:test_trace_processor"
    ]
  }
}

copy("locales") {
  sources = []

  foreach(locale, app_runtime_locales) {
    sources += [ "$root_gen_dir/webos/repack/$locale.pak" ]
  }


  outputs = [ "$image_path/$cbe_data_locales_dir/{{source_file_part}}" ]
  deps = [
    "//third_party/blink/public/strings",
    "//webos:resources",
  ]
}

copy("headers") {
  sources = headers

  outputs = [ "$image_path/$includedir/webruntime/{{source_root_relative_dir}}/{{source_file_part}}" ]
}

copy("pkgconfig") {
  sources = [ "//webos/install/weboswebruntime/libcbe.pc" ]
  outputs = [ "$image_path/$webos_pkgconfigdir/{{source_file_part}}" ]
}

copy("logging_buildflags_header") {
  sources = logging_buildflags_header
  outputs = []

  foreach(file, rebase_path(sources, root_gen_dir)) {
    outputs += [ "$image_path/$includedir/webruntime/" + file ]
  }
  deps = generated_headers_deps
}

copy("debugging_buildflags_header") {
  sources = debugging_buildflags_header
  outputs = []

  foreach(file, rebase_path(sources, root_gen_dir)) {
    outputs += [ "$image_path/$includedir/webruntime/" + file ]
  }
  deps = generated_headers_deps
}

copy("partition_alloc_buildflags_header") {
  sources = partition_alloc_buildflags_header
  outputs = []

  foreach(file, rebase_path(sources, root_gen_dir)) {
    outputs += [ "$image_path/$includedir/webruntime/" + file ]
  }
  deps = generated_headers_deps
}

copy("target_buildflags_header") {
  sources = target_buildflags_header
  outputs = []

  foreach(file, rebase_path(sources, root_gen_dir)) {
    outputs += [ "$image_path/$includedir/webruntime/" + file ]
  }
  deps = generated_headers_deps
}

copy("tracing_buildflags_header") {
  sources = tracing_buildflags_header
  outputs = []

  foreach(file, rebase_path(sources, root_gen_dir)) {
    outputs += [ "$image_path/$includedir/webruntime/" + file ]
  }
  deps = generated_headers_deps
}
