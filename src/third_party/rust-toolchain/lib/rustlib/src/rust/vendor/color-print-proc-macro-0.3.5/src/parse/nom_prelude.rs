pub use nom::IResult;

#[rustfmt::skip]
pub mod complete {
    pub use nom::{
        IResult,
        Err,
        branch::alt,
        branch::permutation,
        bytes::complete::escaped,
        bytes::complete::escaped_transform,
        bytes::complete::is_a,
        bytes::complete::is_not,
        bytes::complete::tag,
        bytes::complete::tag_no_case,
        bytes::complete::take,
        bytes::complete::take_till,
        bytes::complete::take_till1,
        bytes::complete::take_until,
        bytes::complete::take_until1,
        bytes::complete::take_while,
        bytes::complete::take_while1,
        bytes::complete::take_while_m_n,
        character::complete::alpha0,
        character::complete::alpha1,
        character::complete::alphanumeric0,
        character::complete::alphanumeric1,
        character::complete::anychar,
        character::complete::char,
        character::complete::crlf,
        character::complete::digit0,
        character::complete::digit1,
        character::complete::hex_digit0,
        character::complete::hex_digit1,
        character::complete::i128,
        character::complete::i16,
        character::complete::i32,
        character::complete::i64,
        character::complete::i8,
        character::complete::line_ending,
        character::complete::multispace0,
        character::complete::multispace1,
        character::complete::newline,
        character::complete::none_of,
        character::complete::not_line_ending,
        character::complete::oct_digit0,
        character::complete::oct_digit1,
        character::complete::one_of,
        character::complete::satisfy,
        character::complete::space0,
        character::complete::space1,
        character::complete::tab,
        character::complete::u128,
        character::complete::u16,
        character::complete::u32,
        character::complete::u64,
        character::complete::u8,
        character::is_alphabetic,
        character::is_alphanumeric,
        character::is_digit,
        character::is_hex_digit,
        character::is_newline,
        character::is_oct_digit,
        character::is_space,
        combinator::all_consuming,
        combinator::complete,
        combinator::cond,
        combinator::consumed,
        combinator::cut,
        combinator::eof,
        combinator::fail,
        combinator::flat_map,
        combinator::into,
        combinator::iterator,
        combinator::map,
        combinator::map_opt,
        combinator::map_parser,
        combinator::map_res,
        combinator::not,
        combinator::opt,
        combinator::peek,
        combinator::recognize,
        combinator::rest,
        combinator::rest_len,
        combinator::success,
        combinator::value,
        combinator::verify,
        error::ContextError,
        error::Error,
        error::ErrorKind,
        error::FromExternalError,
        error::ParseError,
        error::VerboseError,
        error::VerboseErrorKind,
        error::append_error,
        error::context,
        error::convert_error,
        error::dbg_dmp,
        error::error_to_u32,
        error::make_error,
        multi::count,
        multi::fill,
        multi::fold_many0,
        multi::fold_many1,
        multi::fold_many_m_n,
        multi::length_count,
        multi::length_data,
        multi::length_value,
        multi::many0,
        multi::many0_count,
        multi::many1,
        multi::many1_count,
        multi::many_m_n,
        multi::many_till,
        multi::separated_list0,
        multi::separated_list1,
        sequence::delimited,
        sequence::pair,
        sequence::preceded,
        sequence::separated_pair,
        sequence::terminated,
        sequence::tuple,
    };
}

#[rustfmt::skip]
pub mod streaming {
    pub use nom::{
        IResult,
        branch::alt,
        branch::permutation,
        bytes::streaming::escaped,
        bytes::streaming::escaped_transform,
        bytes::streaming::is_a,
        bytes::streaming::is_not,
        bytes::streaming::tag,
        bytes::streaming::tag_no_case,
        bytes::streaming::take,
        bytes::streaming::take_till,
        bytes::streaming::take_till1,
        bytes::streaming::take_until,
        bytes::streaming::take_until1,
        bytes::streaming::take_while,
        bytes::streaming::take_while1,
        bytes::streaming::take_while_m_n,
        character::is_alphabetic,
        character::is_alphanumeric,
        character::is_digit,
        character::is_hex_digit,
        character::is_newline,
        character::is_oct_digit,
        character::is_space,
        character::streaming::alpha0,
        character::streaming::alpha1,
        character::streaming::alphanumeric0,
        character::streaming::alphanumeric1,
        character::streaming::anychar,
        character::streaming::char,
        character::streaming::crlf,
        character::streaming::digit0,
        character::streaming::digit1,
        character::streaming::hex_digit0,
        character::streaming::hex_digit1,
        character::streaming::i128,
        character::streaming::i16,
        character::streaming::i32,
        character::streaming::i64,
        character::streaming::i8,
        character::streaming::line_ending,
        character::streaming::multispace0,
        character::streaming::multispace1,
        character::streaming::newline,
        character::streaming::none_of,
        character::streaming::not_line_ending,
        character::streaming::oct_digit0,
        character::streaming::oct_digit1,
        character::streaming::one_of,
        character::streaming::satisfy,
        character::streaming::space0,
        character::streaming::space1,
        character::streaming::tab,
        character::streaming::u128,
        character::streaming::u16,
        character::streaming::u32,
        character::streaming::u64,
        character::streaming::u8,
        combinator::all_consuming,
        combinator::cond,
        combinator::consumed,
        combinator::cut,
        combinator::eof,
        combinator::fail,
        combinator::flat_map,
        combinator::into,
        combinator::iterator,
        combinator::map,
        combinator::map_opt,
        combinator::map_parser,
        combinator::map_res,
        combinator::not,
        combinator::opt,
        combinator::peek,
        combinator::recognize,
        combinator::rest,
        combinator::rest_len,
        combinator::success,
        combinator::value,
        combinator::verify,
        error::ContextError,
        error::Error,
        error::ErrorKind,
        error::FromExternalError,
        error::ParseError,
        error::VerboseError,
        error::VerboseErrorKind,
        error::append_error,
        error::context,
        error::convert_error,
        error::dbg_dmp,
        error::error_to_u32,
        error::make_error,
        multi::count,
        multi::fill,
        multi::fold_many0,
        multi::fold_many1,
        multi::fold_many_m_n,
        multi::length_count,
        multi::length_data,
        multi::length_value,
        multi::many0,
        multi::many0_count,
        multi::many1,
        multi::many1_count,
        multi::many_m_n,
        multi::many_till,
        multi::separated_list0,
        multi::separated_list1,
        sequence::delimited,
        sequence::pair,
        sequence::preceded,
        sequence::separated_pair,
        sequence::terminated,
        sequence::tuple,
    };
}
